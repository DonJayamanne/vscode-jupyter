/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
    root: true,
    env: {
        node: true,
        es6: true,
        mocha: true,
        browser: true
    },
    parser: '@typescript-eslint/parser',
    parserOptions: {
        project: 'tsconfig.json',
        ecmaVersion: 12,
        sourceType: 'module'
    },
    plugins: [
        '@typescript-eslint', 'prettier', 'eslint-plugin-react','simple-import-sort'
    ],
    extends: [
        // "airbnb", "airbnb/hooks",
        'eslint:recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
        'prettier'
    ],
    // Add via CLI
    // ignorePatterns: [
    //     "src/ipywidgets/**/*.*"
    // ],
    rules: {
        // "sort-imports": ["error", {
        //     "ignoreCase": false,
        //     "ignoreDeclarationSort": false,
        //     "ignoreMemberSort": false,
        //     "memberSyntaxSortOrder": ["none", "all", "multiple", "single"],
        //     "allowSeparatedGroups": false
        // }],
        "simple-import-sort/imports": "error",
        "simple-import-sort/exports": "error",
        "sort-imports": "off",
        "import/order": "off",
        // "import/newline-after-import": "off",
        // "import/no-duplicates": "off",
        'no-throw-literal': 'warn',
        'no-console': 0,
        'no-cond-assign': 0,
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': [
            'error',
            {
                argsIgnorePattern: '^_'
            }
        ],
        '@typescript-eslint/explicit-module-boundary-types': 'off',
        'no-extra-semi': 'warn',
        semi: 'warn',
        'prettier/prettier': 'error',
        '@typescript-eslint/no-unsafe-assignment': 'off',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        '@typescript-eslint/ban-types': 'off',
        '@typescript-eslint/no-non-null-assertion': 'off',
        '@typescript-eslint/require-await': 'off',
        'no-prototype-builtins': 'off',
        '@typescript-eslint/no-unsafe-return': 'off',
        '@typescript-eslint/restrict-template-expressions': 'off',
        '@typescript-eslint/no-empty-interface': 'off',
        '@typescript-eslint/no-var-requires': 'off',
        'no-async-promise-executor': 'off',
        // Airbnb
        'strict':'off',
        'import/extensions':'off',
        // end airbnb
        // I think these should be avoided (but we can leave as is).
        '@typescript-eslint/no-namespace': 'off',
        // These must be fixed (in order of priority).
        'no-case-declarations': 'off',
        '@typescript-eslint/no-floating-promises': 'off',
        '@typescript-eslint/no-unsafe-call': 'off',
        '@typescript-eslint/no-misused-promises': 'off', // Any errors thrown will not be handled (these are unhandled node exceptions).
        '@typescript-eslint/no-inferrable-types': 'off',
        'xprefer-const': 'off',
        '@typescript-eslint/unbound-method': 'off',
        '@typescript-eslint/no-extra-non-null-assertion': 'off',
        'no-useless-catch': 'off',
        'no-useless-escape': 'off',
        'no-control-regex': 'off',
        '@typescript-eslint/prefer-regexp-exec': 'off',
        'prefer-spread': 'off',
        'prefer-rest-params': 'off',
        '@typescript-eslint/no-empty-function': 'off',
        'no-inner-declarations': 'off',
        'try---@typescript-eslint/no-empty-function': 'off',
        'disable---@typescript-eslint/no-unused-vars': 'off',
        jsdoc: 'off',
        '@typescript-eslint/no-unnecessary-type-assertion': 'off'
    },
    settings: {
        'import/extensions': ['.ts', '.tsx', '.d.ts', '.js', '.jsx'],
        'import/external-module-folders': ['node_modules', 'node_modules/@types'],
        'import/parsers': {
            '@typescript-eslint/parser': ['.ts', '.tsx', '.d.ts']
        },
        'import/resolver': {
            node: {
                extensions: ['.ts', '.tsx', '.d.ts', '.js', '.jsx']
            }
        },
        react: {
            pragma: 'React',
            version: 'detect'
        },
        propWrapperFunctions: ['forbidExtraProps', 'exact', 'Object.freeze'],
        'import/core-modules': [],
        'import/ignore': ['node_modules', '\\.(coffee|scss|css|less|hbs|svg|json)$']
    },
    overrides: [
        {
            files: ['**/*.test.ts', '**/*.test.tsx'],
            env: {
                mocha: true
            },
            rules: {
                // These must be fixed (in order of priority).
                '@typescript-eslint/no-unused-vars': 'off',
                'no-ex-assign': 'off',
                '@typescript-eslint/ban-ts-comment': 'off',
                '@typescript-eslint/no-non-null-asserted-optional-chain': 'off'
            }
        },
        {
            files: ['src/test/**/*.ts'],
            rules: {
                // These must be fixed (in order of priority).
                '@typescript-eslint/no-unused-vars': 'off',
                'no-ex-assign': 'off',
                '@typescript-eslint/ban-ts-comment': 'off',
                '@typescript-eslint/no-non-null-asserted-optional-chain': 'off'
            }
        },
        {
            files: ['**/client/**/*.ts*'],
            rules: {
                'no-unused-vars': ['off']
            },
            env: {
                browser: true
            }
        },
        {
            files: ['build/**/*.js'],
            rules: {
                '@typescript-eslint/no-var-requires': 'off'
            }
        },
        {
            files: ['build/**/plugins/**/*.js'],
            rules: {
                'no-unused-vars': 'off',
                '@typescript-eslint/no-unused-vars': 'off',
                '@typescript-eslint/no-empty-function': 'off'
            }
        },
        {
            files: ['src/**/*.d.ts'],
            rules: {
                '@typescript-eslint/no-explicit-any': 'off',
                '@typescript-eslint/ban-types': 'off',
                '@typescript-eslint/adjacent-overload-signatures': 'off'
            }
        },
        {
            files: ['*.ts', '*.tsx'],
            rules: {
                '@typescript-eslint/no-unused-vars': [2, { args: 'none' }]
            }
        },
        {
            files: "server/**/*.js",
            env: { "node": true },
            rules: {
              "simple-import-sort/imports": "off",
              "import/order": ["error", { "newlines-between": "off" }]
            }
        }
    ]
};
